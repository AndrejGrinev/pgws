[% META
  description = 'Просмотр статей wiki';
  meta.todo.${template.name} = BLOCK %]
   Этот текст будет виден в отладочном режиме в конце страницы перед журнальным выводом<br/>
   Его назначение - фиксировать доработки конкретного шаблона.
  [% END;


  meta.head.timepicker = 1;
  meta.head.autocomplete = 1;
  meta.head.formev = 1;
  meta.head.highlight = 1;

  PROCESS 'macro/tabs.tt2';

  group_id = page.args.shift;
  group_code = page.args.shift;
  doc_path = page.args.shift;
  code = doc_path.remove('^/');
  doc_id = api('wiki.doc_id_by_code', id => group_id, code => code || undef);
  doc_class_id =  api('ws.class_id', code => 'doc');
  wiki_word_str =  api('wiki.doc_keyword', id => doc_id);
  IF doc_class_id;
    doc_class_status =  api('ws.class_status:7', class_id => doc_class_id);
  END ;
  view_uri = uri(code => page.up_code, id => doc_path);
  view_pathname = uri_mk(view_uri.req);
  IF !group_id;
    meta.status = '404';
    meta.status_note = 'Incorrect uri';
    STOP;
  END;
  can_do = api('acl:wiki.add', id => group_id);
  IF !doc_id && !can_do;
      meta.status = '403';
      meta.status_note = 'No access to create';
      STOP;
  END;
  IF !doc_id;
    src=l("Title: Заголовок\nTOC:   UnOrdered\n\nАннотация\n<!-- CUT -->\nТекст");
    save_method = 'wiki.add';
    save_name = l("Создать");
    up_link = { href => '', name => code };
  ELSE;
    save_method = 'doc.save';
    save_name = l("Сохранить");
    can_do = api('acl:doc.save', id => doc_id);
    # TODO: реализовать вариант, когда редактировать можно только атрибуты
    IF !can_do;
      meta.status = '403';
      meta.status_note = 'No access to save-' _ doc_id;
      STOP;
    END;
    info = api('wiki.doc_info', id => doc_id);
    name_doc_up = api('wiki.doc_info', id => info.up_id);
    resp.title =  info.name ? info.name : page.name;
    up_link = { href => view_pathname, name => info.name };

    src = api('wiki.doc_src', id => doc_id);
  END;
  # убрать из пути дубль ссылки на просмотр (страницы и раздела)
  meta.nopath_doubles = 1;
  IF code;
    # добавить в путь ссылку на просмотр
    meta.path_addon = [up_link];
    # TODO: в этот массив будем помещать путь по родительским страницам до корня вики
  END;
%]
<style>
  .affix {
    top: 0px;
    min-width:780px;
  };
</style>

<div id="main">
</div>
<div class="tabbable">
  <div class="tab-content">
[% IF doc_id %]
   <div class="tab-pane" id="p-attr">
    <div class="attrClass">
      <h2>[% l('Атрибуты') %]</h2>
      <form id="attr-form" action="js_required_but_not_available" onsubmit="return false;">
        <input type="hidden" name="_sid" value="[% session.sid %]"/>
        <input type="hidden" name="id" value="[% doc_id %]"/>
        <input type="hidden" id="up_id" name="up_id" value="[% info.up_id %]"/>
        <div id="div_attr">
          <p><label>[% l("Текущий статус") %]
          <span class="editable">
          <select id="status_id" name="status_id" class="edit hide">
            [% FOREACH s IN doc_class_status; %]
              [% IF s.id == info.status_id; %]
                <option value="[% s.id %]" selected="selected">[% s.name %]</option>
              [% ELSE; %]
                <option value="[% s.id %]">[% s.name %]</option>
              [% END; %]
            [% END; %]
          </select>
          <span class="view"></span>
          </span>
          </label></p>
          <p><label>[% l("Следующий статус") %] <span class="editable"><select id="nextStatus" name="status_next_id" class="edit hide">
            [% FOREACH s IN doc_class_status; %]
              [% IF s.id == info.status_next_id; %]
                <option value="[% s.id %]" selected="selected">[% s.name %]</option>
              [% ELSE; %]
                <option value="[% s.id %]">[% s.name %]</option>
              [% END; %]
            [% END; %]
            </select><span class="view"></span></span> от
            <span class="editable">
            <input type="text" size="17" id="date" name="status_next_at" value="[% info.status_next_at %]" class="edit hide"/>
            <span class="view"></span>
            </span></label>
          </p>
          <p><label>[% l("Родительская статья") %] <span class="editable"><input type="text" id="autoc"  autocomplete="off" value="[% name_doc_up.name %]" class="edit hide"/>
          <span class="view"></span>
          </span></label>
          </p>
          <font style="float:left;"><label>[% l("Ключевые слова") %]:</label></font>
          <div id="keyword" style="float:left;">
            [%  FOREACH this = wiki_word_str; %]
              <div style='float:left;margin-left:5px;margin-right:5px;'>[% this %]<input type='hidden' name='keywords' value='[% this %]'/>&nbsp;<a href='#' onClick='delThis(this)' class="edit hide close" title="Удалить">&times;</a></div>
            [%  END; %]
          </div>
          <div class="div_button">
            <span class="editable"><input type="text" id="inputnewkey" style="float:left;" autocomplete="off" class="edit hide"/></span>
            <button onclick="addWord()" class="edit hide">[% l("Добавить новое ключевое слово") %]</button>
          </div>
        </div>
        <br/><br/>
        <div class="buttons">
          <input type="button" class="view edit_on" value="[% l("Изменить") %]" />
          <input type="button" class="edit save hide" value="[% l("Сохранить") %]"/>
          <input type="button" class="edit reset hide" value="[% l("Отмена") %]"/>
        </div>
      </form>
      </div>
      <h2>[% l('Файлы') %]</h2>
      [% INCLUDE block/fs/file_upload.tt2 obj_id = doc_id, list_method = 'wiki.fs_files' %]
    </div>
[% END %]
    <div class="tab-pane" id="p-edit">
      <form id="main-form" action="js_required_but_not_available" onsubmit="return false;">
        <input type="hidden" name="uri" value="[% req.prefix _ '/' _ group_code  %]">
        <input type="hidden" name="code" value="[% code %]">
[% IF doc_id %]
        <input type="hidden" name="extended" value="1">
        <input type="hidden" name="id" value="[% doc_id %]">
        <input type="hidden" name="revision" value="[% info.revision %]">
[% ELSE %]
        <input type="hidden" name="id" value="[% group_id %]">
[% END %]
        <button id="btnSave0" onClick="return formSend('main', '[% save_method %]', true)">[% save_name %]</button>
        <button id="btnFormat0" onClick="return formSend('main', 'doc.format')">[% l("Предварительный просмотр") %]</button>
        <label>[% l("Перейти на вкладку предпросмотра") %] <input type="checkbox" id="is_view0" checked onClick="return toggleChk(this, 1)"></label>
        <textarea rows="10" name="src" class="span10">[% src %]</textarea>
        <button id="btnSave0" onClick="return formSend('main', '[% save_method %]', true)">[% save_name %]</button>
        <button id="btnFormat1" onClick="return formSend('main', 'doc.format')">[% l("Предварительный просмотр") %]</button>
        <label>[% l("Перейти на вкладку предпросмотра") %] <input type="checkbox" id="is_view1" checked onClick="return toggleChk(this,0)"></label>
        <div id="errors" class="error alert alert-error"></div>
        <div id="main-form__err" class="error"></div>
        <div id="main-form_src_err" class="error"></div>
        <div id="status" class='alert alert-info'></div>
      </form>
  </div>
    <div class="tab-pane" id="wikibody">
  </div>
  <div class="tab-pane" id="p-diff"><pre id="diff-src" class="diff"></pre>
  </div>
  <div class="tab-pane" id="p-src"><pre id="html-src" class="html"></pre>
  </div>
 </div>
</div>
[% 
INCLUDE "block/wiki/style_js.tt2";
meta.js.${meta.js.size} = BLOCK %]

<script type="text/javascript">
//<![CDATA[

var links = [[% IF doc_id %]['Атрибуты','p-attr'],[% END; %]['Редактор','p-edit'],['Просмотр','wikibody'],['Изменения','p-diff'],['HTML','p-src']];

var html='<ul class ="nav nav-tabs" data-spy="affix" class="affix-top" data-offset-top="200">';
var content='';
var index = location.href.indexOf('#');
$(links).each(function(i){
  if(index<0 && i == 0){
    html+='<li class="active"><a class="ajax active" href="#'+this[1]+'" data-toggle="tab">'+this[0]+'</a></li>';
    $('#'+this[1]).addClass('active');
  return;
  }
  if(index>=0){
    if(this[1] == location.href.substring(index+1)){
      html+='<li class="active"><a class="ajax active" href="#'+this[1]+'" data-toggle="tab">'+this[0]+'</a></li>';
    $('#'+this[1]).addClass('active');
      return;
    }
  }
  html+='<li><a class="ajax" href="#'+this[1]+'" data-toggle="tab">'+this[0]+'</a></li>';
});
html+='</ul>';
$('#main').html(html);
[% #// TODO: добавить вкладкам onClick="return formSend('main', '[% save_method % ]', false)"
#// false - отключает переход на следующую вкладку при выставленном чекбоксе
%]
/* ------------------------------------------------------------------------- */
// Управление вкладками

window.PGWS.tabSelected = function(objActive){
  $(".ajax").removeClass("active");
  $(".ajax").parent('li').removeClass("active");
  $(objActive).addClass("active");
  $(objActive).parent('li').addClass("active");
  $('.tab-content').find('.tab-pane').removeClass('active');
  index = $(objActive).attr('href').indexOf('#');
  $('#' + $(objActive).attr('href').substring(index+1)).addClass('active');
 // renderTabs();
};

/* ------------------------------------------------------------------------- */
// Инициализация вкладки

if (window.PGWS === undefined) { window.PGWS = {}; }
window.PGWS.page = {
  titleSuffix: '[% resp.title _ " - " _ our_title %]',
};

window.PGWS.tabContentEvents = function(obj) {

};

/* ------------------------------------------------------------------------- */
// Инициализация основной страницы


$(document).ready(function(){
   $('.ajax').ajaxUrl({
    onSuccess:  window.PGWS.tabSelected,
    titleSuffix: window.PGWS.page.titleSuffix,
    classMenuItemActive:'.active'
  });
  window.PGWS.tabContentEvents('');
});

var msg_created = '[% l("Документ создан") %]';
var msg_updated = '[% l("Документ изменен") %]';
var view_name   = '[% l("Актуальная версия") %]';
var view_path   = '[% view_pathname %]';

var page_html   = '[% l("нет данных") %]';
var page_diff   = '[% l("нет данных") %]';

function toggleChk(b,idx) {
  c=$("#is_view" + idx);
  c.attr("checked", $(b).attr("checked"));
  return true;
}

function formSend(id, action) {
  $('#status').text('');
  $('div.error').text('');
  var form_id = '#' + id + '-form';
  api_form(action, form_id, formOK, formErr);
  return false;
};
function delThis(l){        //функция для удаления слова из ключевой строки
  $(l).parent().remove();
};
function addWord(){       //добавляем новое слово в ключевую строку
  obj =  $("#inputnewkey");
  if($(obj).val().trim().length>0){
    $("#keyword").html($("#keyword").html()+constructorDivKeyWord($(obj).val()));
    $(obj).val("")
  }
};

function constructorDivKeyWord(param){
  return "<div style='float:left;margin-left:5px;margin-right:5px;'>"+param+"<input type=\"hidden\" name=\"keywords\" value=\""+param+"\"/>&nbsp;<a href='#' onClick='delThis(this)' class='edit hide close' title='Удалить' style='display:inline;'>&times;</a></div>";
};
var formOK = function(formid, res) {
  if (typeof res == 'number') {
    // redirect to view page
    var m = (res == 1)?msg_created:msg_updated;
    $('#status').text(m);
    // window.location.pathname = view_path;
    window.location.reload(false);
  } else {
    document.title = res.name;
    page_html = res.html;
    page_diff = res.diff;
    $('#html-src').text(page_html).each(function(i, e) {hljs.highlightBlock(e, null)});
    $('#diff-src').text(res.diff).each(function(i, e) {hljs.highlightBlock(e, null)});
    $('#wikibody').html(page_html).each(function(i, e) {hljs.highlightBlock(e, null)});
    PGWS.wikiStyle('wikibody');
    if ($('#is_view0').is(':checked')) {
      $('.nav-tabs').find('.active').next().children("a.ajax").click();
      $('html, body').scrollTop(0);
    }
  }
};

var saveAttr = function(container, cbSaveSuccess, cbFormDisable, cbFormEnable) {
  api_form( 'wiki.doc_update_attr',  '#attr-form',  function(){
    cbFormEnable(container);
    cbSaveSuccess(container);
  });
};

var formErr = function(formid, res) {
  if (res.result && res.result.error) {
    $('#errors').text(res.result.error[0].message);
  }
$('#status').html('<a href="' + view_path + '">'+ view_name +'</a>');
  $('html, body').scrollTop($("#errors").offset().top);
};

var animation_complete = function(t) {
  new_height = $(activeItem).children("div.acc-body").height();
  $("#accordion>div.acc-panel>p.acc-nav").height(new_height > 400?new_height:400 + 10);
}

var acl_wikisave = [% can_do %]; //права на сохранение


/*
    activeDiv=$(activeItem).children("div.acc-body");

    $(activeItem).animate({width: "15px"}, {duration:300, queue:false});
    $(this).parent().animate({width: "92%"}, {duration:300, queue:false, complete: animation_complete});

    activeDiv.hide();

    activeItem = $(this).parent();

    activeDiv=$(activeItem).children("div.acc-body");
*/
var renderTabs = function(){
    if ($('.tab-pane').filter('.active').attr('id') == 'wikibody') {
      $('.tab-pane').filter('.active').html(page_html);
    } else if ($('.tab-pane').filter('.active').attr('id') == 'p-src') {
      $('.tab-pane').filter('.active').children("#html-src").text(page_html);
    } else if ($('.tab-pane').filter('.active').attr('id') == 'p-diff') {
      $('.tab-pane').filter('.active').html(page_diff);
    }
  };

$(document).ready(function(){
 if (acl_wikisave){
    $(".button_change").show();
  }
  if(!acl_wikisave){
    $("#main").hide();
  }
});
$(function() {
  $("#date").datetimepicker({minDate: 0}); //дата-время не раньше текущего
});

$(document).ready(function(){
   $( "#autoc" ).typeahead({
    source: function( request, response ) {
      $.ajax({
        url: "[% req.prefix %]/_wiki.doc_by_name.json",
        dataType: "json",
        data: {
          id: "[% group_id %]",
          string: request
        },
        success: function( data ) {
          if(typeof data.result.data != 'undefined'){
          if(data.result.data != null){
	    var dataArray = new Array();
	      $.map( data.result.data, function(item) {
		var group = {
		  id: item.id,
		  name: item.name
		};
              dataArray.push(group);
	      });
	     response(dataArray);
            }
          }
        }
      });
    },
    matcher: function (item) {
      if (item.name.toLowerCase().indexOf(this.query.trim().toLowerCase()) != -1) {
	  return true;
	}
    },
    sorter: function (items) {
      return items.sort();
    },
    highlighter: function (item) {
      var regex = new RegExp( '(' + this.query + ')', 'gi' );
      label = item.name;
      return label.replace( regex, "<strong>$1</strong>" );
    },
    items: 9999,
    updater:function (item) {

        //item = selected item
        //do your stuff.

        //dont forget to return the item to reflect them into input
        return item;
    }
  });
  $( "#inputnewkey" ).typeahead({
    source: function( request, response ) {
      $.ajax({
        url: "[% req.prefix %]/_wiki.keyword_by_name.json",
        dataType: "json",
        data: {
          id: "[% group_id %]",
          string: request
        },
        success: function( data ) {
          if(typeof data.result.data != 'undefined'){
          if(data.result.data != null){
	    var dataArray = new Array();
	      $.map( data.result.data, function(item) {
		var group = {
		  id: item,
		  name: item
		};
              dataArray.push(group);
	      });
	     response(dataArray);
            }
          }
        }
      });
    },
    matcher: function (item) {
      if (item.id.toLowerCase().indexOf(this.query.trim().toLowerCase()) != -1) {
	  return true;
	}
    },
    sorter: function (items) {
      return items.sort();
    },
    highlighter: function (item) {
      var regex = new RegExp( '(' + this.query + ')', 'gi' );
      label = item.id;
      return label.replace( regex, "<strong>$1</strong>" );
    },
    items: 9999
  });
  /*********************************
  ******formEV инициализация********
  *********************************/
  var hideText = function(c){
    $(c).find('input').hide();
  };
  open_editable=1;
  $(".attrClass").formEV({onSubmit:saveAttr,onViewReady:hideText});      
  $(document).ready(function(){
  if(open_editable){
    $('.edit_on').click();
  }
  });
  /********************************/
  $(".nav-tabs").css("background-color",$("body").css("background-color"));
  $.fn.typeahead.Constructor.prototype.render = function(items) {
     var that = this;
 
     items = $(items).map(function (i, item) {
       i = $(that.options.item).attr('data-value', item.id).attr('data-label', item.name);
       i.find('a').html(that.highlighter(item));
       return i[0];
     })
 
     this.$menu.html(items);
     return this;
};
$.fn.typeahead.Constructor.prototype.next = function (event) {
  var active = this.$menu.find('.active').removeClass('active');
  next = active.next();
  if (!next.length) {
    next = $(this.$menu.find('li')[0]);
  }
  next.addClass('active');
  $(this.$element).val($(next).attr('data-label'));
};
$.fn.typeahead.Constructor.prototype.prev = function (event) {
  var active = this.$menu.find('.active').removeClass('active');
   prev = active.prev();
   if (!prev.length) {
    prev = this.$menu.find('li').last();
   }
  prev.addClass('active');
  $(this.$element).val($(prev).attr('data-label'));
};
$.fn.typeahead.Constructor.prototype.select = function(e) {
  var val = this.$menu.find('.active').attr('data-value');
  $(this.$element).val(this.$menu.find('.active').text());
  if($(this.$element).attr('id')=='autoc'){
    $('#up_id').val(val);
  }
  this.hide();
};
});
//]]>
</script>
[% END; # BLOCK 
  INCLUDE "block/wiki/style_js.tt2";
%]
