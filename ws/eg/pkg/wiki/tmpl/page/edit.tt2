[% META
  description = 'Просмотр статей wiki';

  meta.html_headers.push(
    '<link rel="stylesheet" type="text/css" href="/css/wiki/common.css" />'
    '<link rel="stylesheet" type="text/css" href="/css/wiki/edit.css" />'
  );
  meta.api = 1;
  meta.datepicker = 1;
  meta.timepicker = 1;
  meta.autocomplete = 1;
  group_code = page.args.0;
  doc_path = page.args.1;
  code = doc_path.remove('^/');
  ids = api('wiki.ids_by_code', group_code => group_code, code => code);
  wiki_class_id =  api('ws.class_id', code => 'wiki');
  wiki_word_str =  api('wiki.doc_keyword', id => ids.id);  
 IF wiki_class_id; 
  wiki_class_status =  api('ws.class_status:7', class_id => wiki_class_id); 
 END ;
  view_uri = uri(code => page.up_code, id => doc_path);
  view_pathname = uri_mk(view_uri.req);
  IF !ids || !ids.group_id;
    meta.status = '404';
    meta.status_note = 'Incorrect uri';
    STOP;
  ELSIF !ids.id;
    can_do = api('wiki.can_create', group_id => ids.group_id, code => code);
    IF !can_do;
      meta.status = '403';
      meta.status_note = 'No access to create';
      STOP;
    END;
    src=l("Title: Заголовок\nTOC:   UnOrdered\n\nАннотация\n<!-- CUT -->\nТекст");
  ELSE;
    can_do = api('wiki.can_create', group_id => ids.group_id, code => code);
      #can_do = api('acl:wiki.save', id => ids.id); # TODO: при переносе в ACL изменить на acl:wiki.save
    IF !can_do;
      meta.status = '403';
      meta.status_note = 'No access to save';
      STOP;
    END;
    info = api('wiki.doc_info', id => ids.id);
    name_doc_up = api('wiki.doc_info', id => info.up_id);
    resp.title = info.name;
    src = api('wiki.doc_src', id => ids.id);
  END;
%]
<div id="accordion">
<div class="acc-panel">
    <p class="acc-nav acc-attr">[% l('Атрибуты').replace('(.)','$1 ') %]</p>
    <div class="acc-body" id="p-attr">
	 <form id="attr-form" action="js_required_but_not_available" onsubmit="return false;">
	<input type="hidden" name="_sid" value="[% session.sid %]"/>
	<input type="hidden" name="id" value="[% ids.id %]"/>
	<input type="hidden" id="up_id" name="up_id" value="[% info.up_id %]"/>
	<button class="button_change" style="display:none" onclick="to_Save()">[% l("Изменить") %]</button>
		<div class="div_button" style="display:none">
			<button onClick="saveAttr()">[% l("Сохранить") %]</button>
			<button onclick="Cancel()">[% l("Отмена") %]</button>
		</div>
		<div id="div_attr">
			<p><label>[% l("Текущий статус") %] <select id="status_id" name="status_id">
			[% FOREACH wiki_class_status; %]
				[% IF id==info.status_id; %]
					<option value="[% id %]" selected>[%  name %]</option>
				[% ELSE; %]
					<option value="[% id %]">[%  name %]</option>
				[% END; %]
			[% END; %]
			</select></label></p>
			<p><label>[% l("Следующий статус") %] <select id="nextStatus" name="status_next_id">
			[% FOREACH wiki_class_status; %]
				[% IF id==info.status_next_id; %]
					<option value="[% id %]" selected>[%  name %]</option>
				[% ELSE; %]
					<option value="[% id %]">[%  name %]</option>
				[% END; %]
			[% END; %]
			</select> от
				<input type="text" size="17" id="date" name="status_next_at" value="[% info.status_next_at %]"/></label></p>
			<p><label>[% l("Родительская статья") %] <input type="text" id="autoc"  autocomplete="off" value="[% name_doc_up.name %]"/></p>
			<font style="float:left;"><label>[% l("Ключевые слова") %]:</label></font>
			<div id="keyword" style="float:left;">
			[%  FOREACH this = wiki_word_str; %]
				<div style='float:left;margin-left:5px;margin-right:5px;'>[% this %]<input type='hidden' name='keywords' value='[% this %]'/></div>
			[%  END; %]
			</div>
			<div class="div_button" style="display:none;">
				<input type="text" id="inputnewkey" style="float:left;" autocomplete="off"/>
				<button onclick="addWord()">[% l("Добавить новое ключевое слово") %]</button>
			</div>
		</div>
		<br/><br/><button class="button_change" style="display:none" onclick="to_Save()">[% l("Изменить") %]</button>
		<div class="div_button" style="display:none">
			<button onClick="saveAttr()">[% l("Сохранить") %]</button>
			<button onclick="Cancel()">[% l("Отмена") %]</button>
		</div>
	 </form>
    </div>
  </div>
  <div class="acc-panel">
    <p class="acc-nav acc-edit">[% l('редактор').replace('(.)','$1 ') %]</p>
    <div class="acc-body" id="p-edit">
      <form id="main-form" action="js_required_but_not_available" onsubmit="return false;">
        <input type="hidden" name="uri" value="[% req.prefix _ '/' _ group_code  %]">
        <input type="hidden" name="group_id" value="[% ids.group_id %]">
        <input type="hidden" name="id" value="[% ids.id %]">
        <input type="hidden" name="code" value="[% code %]">
        <input type="hidden" name="revision" value="[% info.revision %]">
        <input type="hidden" name="extended" value="1">
        <button id="btnSave0" onClick="return formSend('main', 'wiki.save')">[% l("Сохранить") %]</button>
        <button id="btnFormat0" onClick="return formSend('main', 'wiki.format')">[% l("Предварительный просмотр") %]</button>
        <label>[% l("Перейти на вкладку предпросмотра") %] <input type="checkbox" id="is_view0" checked onClick="return toggleChk(this, 1)"></label>
        <textarea name="src">[% src %]</textarea>
        <button id="btnSave1" onClick="return formSend('main', 'wiki.save')">[% l("Сохранить") %]</button>
        <button id="btnFormat1" onClick="return formSend('main', 'wiki.format')">[% l("Предварительный просмотр") %]</button>
        <label>[% l("Перейти на вкладку предпросмотра") %] <input type="checkbox" id="is_view1" checked onClick="return toggleChk(this,0)"></label>
        <div id="errors" class="error"></div>
        <div id="main-form__err" class="error"></div>
        <div id="main-form_src_err" class="error"></div>
        <div id="status"></div>
      </form>
    </div>
  </div>
  <div class="acc-panel">
    <p class="acc-nav acc-view">[% l('просмотр').replace('(.)','$1 ') %]</p>
    <div class="acc-body" id="p-html"></div>
  </div>
  <div class="acc-panel">
    <p class="acc-nav acc-diff">[% l('изменения').replace('(.)','$1 ') %]</p>
    <div class="acc-body" id="p-diff"><div></div></div>
  </div>
  <div class="acc-panel">
    <p class="acc-nav acc-src">[% l('html').replace('(.)','$1 ') %]</p>
    <div class="acc-body" id="p-src"><pre id="html-src"></pre></div>
  </div>

</div>

<script type="text/javascript">
//<![CDATA[

var msg_created = '[% l("Документ создан") %]';
var msg_updated = '[% l("Документ изменен") %]';
var msg_load    = '[% l("Загружается страница просмотра") %]'
var view_name   = '[% l("Актуальная версия") %]';
var view_path   = '[% view_pathname %]';

var page_html   = '[% l("нет данных") %]';
var page_diff   = '[% l("нет данных") %]';

function toggleChk(b,idx) {
  c=$("#is_view" + idx);
  c.attr("checked", $(b).attr("checked"));
  return true;
}

function formSend(id, action) {
  $('#status').text('');
  $('div.error').text('');
  var form_id = '#' + id + '-form';
  api_form(action, form_id, formOK,formErr);
  return false;
};
function to_Save(){
	$(".button_change").hide();
	$(".div_button").show();
	addLinkDelete();
	InputDisabled(false);
};
function Cancel(){
	$(".div_button").hide();
	$(".button_change").show();
	delX();
	InputDisabled(true);
};
function InputDisabled(param){
  $("#div_attr").find("input").attr("disabled",param);
  $("#div_attr").find("select").attr("disabled",param);
};
function addLinkDelete(){			// функция для добавления [x]
	var arrFont = $("#keyword").find("div");
	if($(arrFont).find("a").length==0){
		$.each(arrFont, function(){
			$(this).html($(this).html()+" <a href='#' onClick='delThis(this)'>[x]</a>");
		});
	}
};
function delX(){				// скрыть [x]
	$("#keyword").find("a").remove();
};
function delThis(l){				//функция для удаления слова из ключевой строки
	$(l).parent().remove();
};
function addWord(){				//добявляем новое слово в ключевую строку
	obj =  $("#inputnewkey");
		if($(obj).val().trim().length>0){
		$("#keyword").html($("#keyword").html()+constructorDivKeyWord($(obj).val()));
		$(obj).val("")
	}
};

function constructorDivKeyWord(param){
	return "<div style='float:left;margin-left:5px;margin-right:5px;'>"+param+"<input type=\"hidden\" name=\"keywords\" value=\""+param+"\"/><a href='#' onClick='delThis(this)'>[x]</a></div>";
};
function saveAttr(){				//сохраняем атрибуты
	api_form('wiki.doc_update_attr', '#attr-form',formOK);
};
var resOk = function(formid, res) {
};
var formOK = function(formid, res) {
  if (typeof res == 'number') {
    // redirect to view page
    var m = (res == 1)?msg_created:msg_updated;
    m = m + '. ' + msg_load;
    $('#status').text(m);
    window.location.pathname = view_path;
  } else {
    document.title = res.name;
    page_html = res.html;
    page_diff = res.diff;
    if ($('#is_view0').is(':checked')) {
      $(activeItem).next().children("p.acc-nav").click();
      $('html, body').scrollTop(0);
    }
  }
};

var formErr = function(formid, res) {
  if (res.result && res.result.error) {
    $('#errors').text(res.result.error[0].message);
  }
$('#status').html('<a href="' + view_path + '">'+ view_name +'</a>');
  $('html, body').scrollTop($("#errors").offset().top);
};

var animation_complete = function(t) {
  new_height = $(activeItem).children("div.acc-body").height();
  $("#accordion>div.acc-panel>p.acc-nav").height(new_height > 400?new_height:400 + 10);
}

var acl_wikisave = [% api('acl:wiki.save', id => ids.id) %]; //права на сохранение

$(document).ready(function(){
  // http://www.designchemical.com/blog/index.php/jquery/jquery-simple-horizontal-accordion/
  activeItem = $("#accordion div.acc-panel:first");			
	[% IF !ids.id; %]
		activeItem = $("#p-edit").parent();
	[% END; %]

  $(activeItem).addClass('active');

  $("#accordion div.acc-panel p.acc-nav").click(function(){

    activeDiv=$(activeItem).children("div.acc-body");

    $(activeItem).animate({width: "15px"}, {duration:300, queue:false});
    $(this).parent().animate({width: "92%"}, {duration:300, queue:false, complete: animation_complete});

    activeDiv.hide();

    activeItem = $(this).parent();

    activeDiv=$(activeItem).children("div.acc-body");
    if (activeDiv.attr('id') == 'p-html') {
      activeDiv.html(page_html);
    } else if (activeDiv.attr('id') == 'p-src') {
      activeDiv.children("#html-src").text(page_html);
    } else if (activeDiv.attr('id') == 'p-diff') {
      activeDiv.children("div").html(page_diff);
    }
    activeDiv.show();
  });
  
  if (acl_wikisave){
	$(".button_change").show();
  }
  if(!acl_wikisave){
	$("#accordion").hide();
  }
  InputDisabled(true);
});
$(function() {
	$("#date").datetimepicker(); //дата-время
});

$(document).ready(function(){
var options = {
    serviceUrl:'[% req.prefix %]/_wiki.doc_by_name.json?',
    params: { group_id: "[% ids.group_id %]", string: "{query}", sid: "[% session.sid %]", lang: "[% session.lang %]"},
    return_data: { id:'{id}',name:'{name}',retargs:'string'},
    onSelect: function(value, data){
	$("#up_id").val(data);
    }
  };
  a = $('#autoc').autocomplete(options);
  //Перезаписываем стандартные методы на свои для данного обекта
  //что бы можно было использовать любые опубликованные методы, а не только те,
  // которые используют входной параметр "query" и выходной [{id,name}]
  a.getSuggestions = function(q) {
    var cr, me,temp,saveparams=[];
    cr = this.isLocal ? this.getSuggestionsLocal(q) : this.cachedResponse[q];
    if (cr && $.isArray(cr.suggestions)) {
      this.suggestions = cr.suggestions;
      this.data = cr.data;
      this.suggest();
    } else if (!this.isBadQuery(q)) {
      me = this;
      me.options.params.query = q;
      //Сохранили шаблоны параметров
      for (temp in me.options.params){
        saveparams[temp]=me.options.params[temp];
        me.options.params[temp]=me.options.params[temp].replace(/{query}/g,me.options.params.query);
      }
      //Сохранили шаблоны параметров
      $.get(this.serviceUrl, me.options.params, function(txt) { me.processResponse(txt); }, 'text');
      //cpn Востановили шаблоны параметров
      for (temp in me.options.params){
        me.options.params[temp]=saveparams[temp];
      }
      //Востановили шаблоны параметров
    }
  };
  a.processResponse = function(text) {
    var response,nameEval,nameTemp,idRegexp,xRegexp,mkey;
    try {
      response = eval('(' + text + ')');
    } catch (err) { return; }
    if (!$.isArray(response.result.data)) { response.result.data = []; }
    var len = response.result.data.length;
    var suggestions = [];
    var data = [];
    for (i = 0; i < len; i++) {
      s = response.result.data[i];
      //формируем данные для отображения выпадающего списка
      //призводим подмены из опции return_data[]
      if (this.options.return_data["name"]!=null) {
        nameTemp=this.options.return_data["name"];
        for (mkey in s){
          xRegexp=new RegExp('{'+mkey+'}','g');
          nameTemp=nameTemp.replace(xRegexp,s[mkey]);
        }
      } else {
          nameTemp=s.name;
      }
      if (this.options.return_data["id"]!=null) {
        idTemp=this.options.return_data["id"];
        for ( mkey in s){
          xRegexp=new RegExp('{'+mkey+'}','g');
          idTemp=idTemp.replace(xRegexp,s[mkey]);
         }
      } else {
        idTemp=s.id;
      }
      suggestions.push(nameTemp);
      data.push(idTemp);
    }
    var resp = {
      query: response.result.args[this.options.return_data.retargs],
      suggestions: suggestions,
      data: data
    };
    if(!this.options.noCache){
      this.cachedResponse[resp.query] = resp;
      if (resp.suggestions.length === 0) { this.badQueries.push(resp.query); }
    }
    //Добавили % что бы набранное в autocomplete совпадало с тем что искали через code:'{query}%'
    if (resp.query === this.getQuery(this.currentValue)) {
      this.suggestions = resp.suggestions;
      this.data = resp.data;
      this.suggest();
    };
  };
});
//////////////автокомплит для ключевых слов///////////
  var optionskey = {
    serviceUrl:'[% req.prefix %]/_wiki.keyword_by_name.json?',
    params: { group_id: "[% ids.group_id %]", string: "{query}", sid: "[% session.sid %]", lang: "[% session.lang %]"},
    return_data: { name:'{name}',retargs:'string'},
    width: 150,
    onSelect: function(value, data){
	   addWord();
    }
  };
	var b = $('#inputnewkey').autocomplete(optionskey);

b.getSuggestions = function(q) {
    var cr, me,temp,saveparams=[];
    cr = this.isLocal ? this.getSuggestionsLocal(q) : this.cachedResponse[q];
    if (cr && $.isArray(cr.suggestions)) {
      this.suggestions = cr.suggestions;
      this.data = cr.data;
      this.suggest();
    } else if (!this.isBadQuery(q)) {
      me = this;
      me.options.params.query = q;
      //Сохранили шаблоны параметров
      for (temp in me.options.params){
        saveparams[temp]=me.options.params[temp];
        me.options.params[temp]=me.options.params[temp].replace(/{query}/g,me.options.params.query);
      }
      //Сохранили шаблоны параметров
      $.get(this.serviceUrl, me.options.params, function(txt) { me.processResponse(txt); }, 'text');
      //cpn Востановили шаблоны параметров
      for (temp in me.options.params){
        me.options.params[temp]=saveparams[temp];
      }
      //Востановили шаблоны параметров
    }
  };
  b.processResponse = function(text) {
    var response,nameEval,nameTemp,idRegexp,xRegexp,mkey;
    try {
      response = eval('(' + text + ')');
    } catch (err) { return; }
    if (!$.isArray(response.result.data)) { response.result.data = []; }
    var len = response.result.data.length;
    var suggestions = [];
    var data = [];
    for (i = 0; i < len; i++) {
      s = response.result.data[i];
      //формируем данные для отображения выпадающего списка
      //призводим подмены из опции return_data[]
      nameTemp=s;
      idTemp=i;
      
      suggestions.push(nameTemp);
      data.push(idTemp);
    }
    var resp = {
      query: response.result.args[this.options.return_data.retargs],
      suggestions: suggestions,
      data: data
    };
    if(!this.options.noCache){
      this.cachedResponse[resp.query] = resp;
      if (resp.suggestions.length === 0) { this.badQueries.push(resp.query); }
    }
    //Добавили % что бы набранное в autocomplete совпадало с тем что искали через code:'{query}%'
    if (resp.query === this.getQuery(this.currentValue)) {
      this.suggestions = resp.suggestions;
      this.data = resp.data;
      this.suggest();
    };
  };

</script>

