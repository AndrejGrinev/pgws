[% META
# Copyright (c) 2010, 2012 Tender.Pro http://tender.pro.
# This file is part of PGWS - Postgresql WebServices.
  description = 'Методы и их описание c использованием JS';

  IF get.code;
    resp.skin = 'blank';
    INCLUDE block/apidoc/smd_table.tt2;
    RETURN;
  END;
  IF get.li;
    resp.skin = 'blank';
    INCLUDE block/apidoc/smd_li.tt2;
    RETURN;
  END;
  meta.api = 1;
  meta.autocomplete = 1;
  pg = uri(code => 'api.smd1');
%]

<script type="text/javascript">
//<![CDATA[
  //Для кеширования результатов вызовов списка методов и детализации по методу
  PWL_cache={method_li:{},method_detail:{}} ;;
//]]>
</script>

<script type="text/javascript">
$(document).ready(function(){
  var anchor;
  $('#autoc').bind('keyup',checkAvailability);
  //повесили обработчики на <a> которые будут сформированы
  $("#form_smd"+" ul li a").live("click",myclick);
  if (location.hash) {
    // загрузка описания метода при открытии страницы
    anchor = window.location.hash.slice(1); //hash to string (= "myanchor")
    $("#autoc").val( anchor );
//    checkAvailability();
    form_send();
  } else {
  }
    checkAvailability();

  //Опции для autocomplete
  //вместо {code}, {name} и {query} на этапе выполнения подставяться значения этих параметров
  var options = {
    serviceUrl:'[% req.prefix %]/_ws.method_lookup.json?',
    params: { code: "{query}%", sid: "[% session.sid %]", lang: "[% session.lang %]"},
    return_data: {id:'{code}', name:'{code} - {name}',retargs:'code'},
    onSelect: function(value, data){
      form_send(value,data);
      $('#autoc').val(data);
    }
  };
  var a = $('#autoc').autocomplete(options);
  //Перезаписываем стандартные методы на свои для данного обекта
  //что бы можно было использовать любые опубликованные методы, а не только те,
  // которые используют входной параметр "query" и выходной [{id,name}]
  a.getSuggestions = function(q) {
    var cr, me,temp,saveparams=[];
    cr = this.isLocal ? this.getSuggestionsLocal(q) : this.cachedResponse[q];
    if (cr && $.isArray(cr.suggestions)) {
      this.suggestions = cr.suggestions;
      this.data = cr.data;
      this.suggest();
    } else if (!this.isBadQuery(q)) {
      me = this;
      me.options.params.query = q;
      //Сохранили шаблоны параметров
      for (temp in me.options.params){
        saveparams[temp]=me.options.params[temp];
        me.options.params[temp]=me.options.params[temp].replace(/{query}/g,me.options.params.query);
      }
      //Сохранили шаблоны параметров
      $.get(this.serviceUrl, me.options.params, function(txt) { me.processResponse(txt); }, 'text');
      //cpn Востановили шаблоны параметров
      for (temp in me.options.params){
        me.options.params[temp]=saveparams[temp];
      }
      //Востановили шаблоны параметров
    }
  };
  a.processResponse = function(text) {
    var response,nameEval,nameTemp,idRegexp,xRegexp,mkey;
    try {
      response = eval('(' + text + ')');
    } catch (err) { return; }
    if (!$.isArray(response.result.data)) { response.result.data = []; }
    var len = response.result.data.length;
    var suggestions = [];
    var data = [];
    for (i = 0; i < len; i++) {
      s = response.result.data[i];
      //формируем данные для отображения выпадающего списка
      //призводим подмены из опции return_data[]
      if (this.options.return_data["name"]!=null) {
        nameTemp=this.options.return_data["name"];
        for (mkey in s){
          xRegexp=new RegExp('{'+mkey+'}','g');
          nameTemp=nameTemp.replace(xRegexp,s[mkey]);
        }
      } else {
          nameTemp=s.name;
      }
      if (this.options.return_data["id"]!=null) {
        idTemp=this.options.return_data["id"];
        for ( mkey in s){
          xRegexp=new RegExp('{'+mkey+'}','g');
          idTemp=idTemp.replace(xRegexp,s[mkey]);
         }
      } else {
        idTemp=s.id;
      }
      suggestions.push(nameTemp);
      data.push(idTemp);
    }
    var resp = {
      query: response.result.args[this.options.return_data.retargs],
      suggestions: suggestions,
      data: data
    };
    if(!this.options.noCache){
      this.cachedResponse[resp.query] = resp;
      if (resp.suggestions.length === 0) { this.badQueries.push(resp.query); }
    }
    //Добавили % что бы набранное в autocomplete совпадало с тем что искали через code:'{query}%'
    if (resp.query === this.getQuery(this.currentValue)+'%') {
      this.suggestions = resp.suggestions;
      this.data = resp.data;
      this.suggest();
    };
  };

});
//$(document).ready(function(){}
function show_method_li(method){
  var div_id=method.replace(/\./g,"_");
  var key = method+'%';
  if (PWL_cache.method_li[key]){
    $('#form_smd').html(PWL_cache.method_li[key]) ;
    show_method_detail(method);
  } else {
    $('#form_smd').load('[% uri_mk(pg.req, 'li=') %]'+key,cb_method_li);
  }
}

function checkAvailability() {
  var autoc=$('#autoc').val().replace(/ .*$/,'');
  $('#myB').text(autoc==''?"[% l('Показать все') %]":"[% l('Найти') %]");
  location.href=document.URL.replace(/#.*$/,"")+(autoc?'#'+autoc:'#');
//  location.href=document.URL.replace(/#.+$/,"")+(autoc?autoc:'');
};

function form_send(value,data) {
  var par,nameid,method;
  method=value?data:$('#autoc').val();
  method=method.replace(/ .*$/,'');
  $('#autoc').val(method);
  show_method_li(method);
  return false;
};
function cb_method_detail(data,status,XMLHttpRequest){
  var div_id,method;
  method=$('#autoc').val();
  div_id=method.replace(/\./g,"_");
  if (method){
    PWL_cache.method_detail[method]=data;
  }
}

function cb_method_li(data,status){
  var div_id,method;
  method=$('#autoc').val();
  div_id=method.replace(/\./g,"_");
  PWL_cache.method_li[method+'%']=data;
  show_method_detail(method);
}
function show_method_detail(method) {
  var div_id=method.replace(/\./g,"_");
  checkAvailability();
  try {
    if (method){
      if (PWL_cache.method_detail[method]){
        $('#'+div_id).html(PWL_cache.method_detail[method]);
      } else {
        $('#'+div_id).load('[% uri_mk(pg.req, 'code=') %]'+method,cb_method_detail);
      }
    }
  } catch (e) {
     //В списке методов нет метода точно совпадающего с $('#autoc').val()
     //Точнее нет div c id совпадающего с $('#autoc').val().replace(/\./g,"_");
  }
}

function myclick() {
  var cnt,method,div_id;
  method=$(this).text();
  div_id=method.replace(/\./g,"_");
  $('#autoc').val(method);
  checkAvailability();
  cnt=$('#'+div_id).children().size();
  if (cnt==0){
     show_method_detail(method);
  } else {
    $('#'+div_id).empty();
  }
//  return true;
};
</script>

<div id="form1_code_err" style="color:green"></div>
<div id="form1___err" style="color:green"></div>
<div id="status" style="color:red"></div>
<form id="form1" onsubmit="return false;">
  [% l('Имя метода:') %]
  <input type="text" id="autoc" name="code" autocomplete="off" size="50">
  <button id="myB" onClick="form_send();">[% l('Найти') %]</button>
</form>
<div id="form_smd"></div>
